Least Common AncestorBookmark Suggest Edit
Find the lowest common ancestor in an unordered binary tree given two values in the tree.

 Lowest common ancestor : the lowest common ancestor (LCA) of two nodes v and w in a tree or directed acyclic graph (DAG) is the lowest (i.e. deepest) node that has both v and w as descendants. 
Example :


        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2_     0        8
         /   \
         7    4
For the above tree, the LCA of nodes 5 and 1 is 3.

 LCA = Lowest common ancestor 
Please note that LCA for nodes 5 and 4 is 5.

You are given 2 values. Find the lowest common ancestor of the two nodes represented by val1 and val2
No guarantee that val1 and val2 exist in the tree. If one value doesn’t exist in the tree then return -1.
There are no duplicate values.
You can use extra memory, helper functions, and can modify the node struct but, you can’t add a parent pointer.
See Expected Output



/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public int lca(TreeNode a, int val1, int val2) {
	    Stack<Integer> stack1 = new Stack<>();
	    int check1 = findVal(a,val1,stack1);
	  
	    Stack<Integer> stack2 = new Stack<>();
	    int check2 = findVal(a,val2,stack2);
	    
	    if(check1 != 1 && check2 != 1){
	        return -1;
	    }
	    
	    int lastVal = -1;
	   
	    while(!stack1.isEmpty() && !stack2.isEmpty()){
	        int v1 = stack1.pop();
	        int v2 = stack2.pop();
	        
	        if(v1 == v2){
	            lastVal = v1;
	        } else {
	            return lastVal;
	        }
	    }
	    
	    return lastVal;
	}
	

	
	int findVal(TreeNode root, int val, Stack<Integer> stack){
	    if(root == null){
	        return 0;
	    }
	    
	    if(root.val == val){
	        stack.push(val);
	        return 1;
	    }
	    
	    int left = findVal(root.left, val, stack);
	    
	    if(left == 1){
	        stack.push(root.val);
	        return 1;
	    }
	    
	    int right = findVal(root.right, val,stack);
	    
	    if(right == 1){
	        stack.push(root.val);
	        return 1;
	    }
	    
	    return 0;
	}
}
